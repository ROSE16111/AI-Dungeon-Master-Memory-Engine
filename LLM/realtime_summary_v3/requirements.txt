# ============================================================================
# D&D Voice Recorder - Enhanced Edition
# Complete Requirements File
# ============================================================================

# ============================================================================
# CORE DEPENDENCIES
# ============================================================================

# Numerical computing
numpy>=1.24.0,<2.0.0

# Audio I/O
sounddevice>=0.4.6

# System utilities
psutil>=5.9.0

# ============================================================================
# AUDIO PROCESSING
# ============================================================================

# Noise reduction
noisereduce>=3.0.0

# Audio file handling (if needed for future features)
librosa>=0.10.0
soundfile>=0.12.0

# Resampling
resampy>=0.4.2

# ============================================================================
# DEEP LEARNING FRAMEWORKS
# ============================================================================

# PyTorch (CPU version by default)
# For CUDA 11.8, use: --index-url https://download.pytorch.org/whl/cu118
# For CUDA 12.1, use: --index-url https://download.pytorch.org/whl/cu121
torch>=2.0.0,<2.3.0
torchaudio>=2.0.0,<2.3.0

# ONNX Runtime (alternative for Silero VAD)
onnxruntime>=1.16.0

# ============================================================================
# SPEECH RECOGNITION
# ============================================================================

# Faster Whisper (optimized Whisper implementation)
faster-whisper>=0.10.0,<1.1.0

# CTranslate2 (backend for faster-whisper)
ctranslate2>=3.20.0

# Alternative: OpenAI Whisper (commented out, use if faster-whisper has issues)
# openai-whisper>=20231117

# ============================================================================
# LLM INFERENCE
# ============================================================================

# llama.cpp Python bindings
llama-cpp-python>=0.2.0,<0.3.0

# Alternative: Using with CUDA support (uncomment if you have NVIDIA GPU)
# Install with: CMAKE_ARGS="-DLLAMA_CUBLAS=on" pip install llama-cpp-python --force-reinstall --no-cache-dir

# Alternative: Using with Metal support for macOS (uncomment for Apple Silicon)
# Install with: CMAKE_ARGS="-DLLAMA_METAL=on" pip install llama-cpp-python --force-reinstall --no-cache-dir

# ============================================================================
# DOCUMENT GENERATION
# ============================================================================

# Word document generation
python-docx>=1.1.0

# PDF generation (optional)
reportlab>=4.0.0

# Rich text formatting
python-docx>=0.8.11

# ============================================================================
# DATA PROCESSING
# ============================================================================

# Regular expressions (built-in, but ensure compatibility)
regex>=2023.0.0

# Date/time handling
python-dateutil>=2.8.0

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Advanced logging
colorlog>=6.7.0

# Progress bars
tqdm>=4.66.0

# System monitoring
psutil>=5.9.0

# ============================================================================
# DEVELOPMENT DEPENDENCIES (Optional)
# ============================================================================

# Testing
# pytest>=7.4.0
# pytest-cov>=4.1.0

# Code formatting
# black>=23.0.0
# isort>=5.12.0

# Type checking
# mypy>=1.5.0

# Linting
# pylint>=2.17.0
# flake8>=6.1.0

# ============================================================================
# PLATFORM-SPECIFIC NOTES
# ============================================================================

# WINDOWS:
# - Install Microsoft C++ Build Tools if compilation errors occur
#   https://visualstudio.microsoft.com/visual-cpp-build-tools/
# - For GPU support, ensure CUDA Toolkit is installed
#   https://developer.nvidia.com/cuda-downloads

# MACOS:
# - For Apple Silicon (M1/M2/M3), use Metal acceleration
# - Install Xcode Command Line Tools: xcode-select --install
# - PyTorch has native Metal support since version 2.0

# LINUX:
# - Install system audio libraries: sudo apt-get install portaudio19-dev python3-pyaudio
# - For CUDA support, install CUDA Toolkit matching your GPU
# - For AMD GPU, consider ROCm support (experimental)

# ============================================================================
# GPU ACCELERATION SETUP
# ============================================================================

# OPTION 1: NVIDIA GPU (CUDA)
# Step 1: Install CUDA Toolkit (11.8 or 12.1)
# Step 2: Install PyTorch with CUDA:
#   pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
# Step 3: Install llama-cpp-python with CUDA:
#   CMAKE_ARGS="-DLLAMA_CUBLAS=on" pip install llama-cpp-python --force-reinstall --no-cache-dir

# OPTION 2: Apple Silicon (Metal)
# Step 1: Install PyTorch (has Metal support by default)
# Step 2: Install llama-cpp-python with Metal:
#   CMAKE_ARGS="-DLLAMA_METAL=on" pip install llama-cpp-python --force-reinstall --no-cache-dir

# OPTION 3: AMD GPU (ROCm) - Experimental
# Follow ROCm installation guide for your platform
# Use PyTorch ROCm builds

# ============================================================================
# INSTALLATION INSTRUCTIONS
# ============================================================================

# BASIC INSTALLATION (CPU only):
# pip install -r requirements.txt

# ADVANCED INSTALLATION (with GPU support):
# 1. Install CUDA Toolkit or setup Metal (macOS)
# 2. Install PyTorch with GPU support (see GPU ACCELERATION SETUP above)
# 3. Install other requirements:
#    pip install -r requirements.txt
# 4. Reinstall llama-cpp-python with GPU support (see commands above)

# VERIFY INSTALLATION:
# python -c "import torch; print(f'PyTorch: {torch.__version__}')"
# python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
# python -c "import faster_whisper; print('Faster Whisper: OK')"
# python -c "from llama_cpp import Llama; print('Llama CPP: OK')"

# ============================================================================
# TROUBLESHOOTING
# ============================================================================

# ERROR: "No module named 'sounddevice'"
# FIX: pip install sounddevice --upgrade

# ERROR: "CUDA out of memory"
# FIX: Reduce batch size, use smaller models, or switch to CPU

# ERROR: "Could not load dynamic library 'libcublas.so'"
# FIX: Install CUDA Toolkit and add to PATH/LD_LIBRARY_PATH

# ERROR: "Microsoft Visual C++ 14.0 is required" (Windows)
# FIX: Install Visual C++ Build Tools

# ERROR: "ImportError: DLL load failed" (Windows)
# FIX: Install Visual C++ Redistributable packages

# ERROR: Whisper transcription is slow
# FIX: Use smaller model (base/small), enable GPU acceleration

# ERROR: LLM generation is slow
# FIX: Increase n_threads, enable GPU layers, use more quantized model (Q4/Q3)

# ============================================================================
# ALTERNATIVE PACKAGE SOURCES
# ============================================================================

# If PyPI installation fails, try Anaconda:
# conda install pytorch torchvision torchaudio -c pytorch
# conda install -c conda-forge faster-whisper
# conda install -c conda-forge sounddevice

# For offline installation:
# 1. Download all wheels: pip download -r requirements.txt -d ./packages
# 2. Install offline: pip install --no-index --find-links=./packages -r requirements.txt

# ============================================================================
# MINIMUM VERSIONS FOR COMPATIBILITY
# ============================================================================

# Python: 3.8 - 3.11 (3.12 may have compatibility issues with some packages)
# Recommended: Python 3.10

# ============================================================================
# ESTIMATED DISK SPACE REQUIREMENTS
# ============================================================================

# Python packages: ~2-3 GB
# Whisper models: 140MB (tiny) - 2.9GB (large)
# LLM model: 4-8GB (depending on quantization)
# Total: ~10-15GB for complete setup

# ============================================================================
# PERFORMANCE OPTIMIZATION PACKAGES (Optional)
# ============================================================================

# Intel MKL for faster CPU operations (Intel CPUs)
# mkl>=2023.0.0
# intel-extension-for-pytorch>=2.0.0

# OpenBLAS (alternative to MKL)
# openblas>=0.3.0

# Numba for JIT compilation
# numba>=0.58.0

# ============================================================================
# SECURITY AND UPDATES
# ============================================================================

# Check for security vulnerabilities:
# pip install safety
# safety check -r requirements.txt

# Update all packages:
# pip install --upgrade -r requirements.txt

# Pin versions for reproducibility in production
# Use: pip freeze > requirements-lock.txt